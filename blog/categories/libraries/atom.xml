<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: libraries | Byte Tank]]></title>
  <link href="http://lopespm.github.com/blog/categories/libraries/atom.xml" rel="self"/>
  <link href="http://lopespm.github.com/"/>
  <updated>2018-01-26T16:51:29+00:00</updated>
  <id>http://lopespm.github.com/</id>
  <author>
    <name><![CDATA[Pedro Lopes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Native Offscreen Toolbar]]></title>
    <link href="http://lopespm.github.com/libraries/2018/01/25/react-native-offscreen-toolbar.html"/>
    <updated>2018-01-25T00:00:00+00:00</updated>
    <id>http://lopespm.github.com/libraries/2018/01/25/react-native-offscreen-toolbar</id>
    <content type="html"><![CDATA[<p>In material design, there is a <a href="https://material.io/guidelines/patterns/scrolling-techniques.html#scrolling-techniques-behavior">common scrolling technique</a> in which the toolbar is smoothly tucked away while scrolling down and is made visible again when scrolling up. This behaviour is fairly straightforward to implement when developing a native android app, but for a react native app, the best solution I found was <a href="https://medium.com/appandflow/react-native-collapsible-navbar-e51a049b560a">Janic Duplessis’</a>.</p>

<p>The <a href="https://www.npmjs.com/package/react-native-offscreen-toolbar">library</a> I am releasing today is an encapsulation of this behaviour and its implementation is heavily based on Janic Duplessis’ approach.</p>

<center>
  <div style=" display: inline-block; ">
    <figure class="image"><center><img src="http://lopespm.github.com/files/rn-offscreen-toolbar/simplelist_demo.gif" /></center></figure>
  </div>
  <div style=" display: inline-block; width: 50px"></div>
    <div style=" display: inline-block;">
    <figure class="image"><center><img src="http://lopespm.github.com/files/rn-offscreen-toolbar/search_demo.gif" /></center></figure>
  </div>
  <figcaption class="media-caption">Library usage in both the <a href="https://github.com/lopespm/react-native-offscreen-toolbar/tree/master/example">example</a> bundled with the library and in the search screen of a to be released application</figcaption>
</center>

<!--more-->

<h2 id="how-to-use-it">How to Use it</h2>

<p>Installation:</p>

<div><div class="CodeRay">
  <div class="code"><pre>$ $ npm install react-native-offscreen-toolbar --save
</pre></div>
</div>
</div>

<p><br /></p>

<p>Usage (full example <a href="https://github.com/lopespm/react-native-offscreen-toolbar/tree/master/example">here</a>):</p>

<div><div class="CodeRay">
  <div class="code"><pre>import OffscreenToolbar from 'react-native-offscreen-toolbar';
 
export default class YourComponent extends React.Component {
    render() {
        const toolbar = () =&gt; (&lt;ToolbarAndroid title={'Title'} /&gt;);
        const listItem = ({item}) =&gt; &lt;Text&gt;{item.key}&lt;/Text&gt;;
        const scrollable = () =&gt; (&lt;FlatList data={DUMMY_DATA} renderItem={listItem}/&gt;);
        return (
            &lt;View style={styles.container}&gt;
                &lt;OffscreenToolbar
                    toolbar={toolbar}
                    scrollable={scrollable} /&gt;
            &lt;/View&gt;
        );
    }
}
</pre></div>
</div>
</div>

<p><br /></p>

<p>You can pass any component you desire as a <code>toolbar</code>, but typically this will be a toolbar/navbar backed by react native or a UI library of your choice, like <a href="https://nativebase.io/">Native Base</a>.</p>

<p>The scrollable however, will need to be scrollable component such as a <code>ScrollView</code>, <code>ListView</code>, <code>FlatList</code>, etc. The <code>OffscreenToolbar</code> will then create hooks around this component in order to gauge the user’s scrolling behaviour and change toolbar’s animation accordingly.</p>

<p>You can also provide the following properties to the component:</p>

<ul>
  <li><code>scrollableOverlay</code>: for a search screen as the one presented above, this component can be used to present an overlay between the scrollable and the toolbar</li>
  <li><code>toolbarHeight</code>: adjust this property according to your toolbar height. This value is used for the toolbar’s animation</li>
  <li><code>scrollablePaddingTop</code>: since the scrollable is laying behind the toolbar, this property comes in handy to place the scrollable content below the toolbar</li>
</ul>

<h2 id="where-to-get-the-library">Where to get the library</h2>

<ul>
  <li><a href="https://github.com/lopespm/react-native-offscreen-toolbar">Source code on GitHub</a></li>
  <li><a href="https://www.npmjs.com/package/react-native-offscreen-toolbar">NPM distribution</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compressed Deque]]></title>
    <link href="http://lopespm.github.com/libraries/2016/08/27/compressed-deque.html"/>
    <updated>2016-08-27T00:00:00+01:00</updated>
    <id>http://lopespm.github.com/libraries/2016/08/27/compressed-deque</id>
    <content type="html"><![CDATA[<p>This post aims to give some insights about a recently <a href="https://github.com/lopespm/compressed-deque">open-sourced</a> python deque which compresses its items for a decreased volatile and persistent memory footprint.</p>

<!--more-->

<h2 id="why-how-can-it-be-useful">Why? How can it be useful?</h2>

<p>Compressed Deque came up while buiding an algorithm which relied on fast random accesses of numerous complex objects. When compressed, this blob of data could easily fit in fast volatile memory, as opposed to being fetched from a slow hard drive. Even though there was a performance penalty from compressing/decompressing items from volatile memory, this solution proved to be faster than accessing these items from indexed files on a hard disk (on a SSD the gains are more negligible though).</p>

<p>This collection might also be useful for programs running on devices with very limited memory available.</p>

<h2 id="structure">Structure</h2>

<p>Compressed Deque inherits from <a href="https://docs.python.org/2/library/collections.html#collections.deque">deque</a> and stores its items as zlib compressed pickles. The middle pickle layer only serves as a generic serialization method which can provide a serialized object string for zlib to compress. Although pickle can compress objects, its compression rate does not match zlib’s, even using <a href="https://docs.python.org/2/library/pickle.html#data-stream-format">higher protocols</a>.</p>

<p><img src="/files/compressed_deque/value_layers.png" alt="image" /></p>

<p><code>save_to_file()</code> and <code>load_from_file()</code> static methods are provided to persist the collection directly into disk in its compressed representation, without much overhead. </p>

<p>The persisted file contains a sequence of header/compressed_value pairs: the header is a 4 byte integer description of the compressed value’s length and the compressed value is similiar to its in-memory representation.</p>

<p><img src="/files/compressed_deque/persisted_values.png" alt="image" /></p>

<h2 id="how-to-use-it">How to Use it</h2>

<p>An easy way to install this package is by using <code>pip</code>:</p>

<div><div class="CodeRay">
  <div class="code"><pre>$ pip install compressed-deque
</pre></div>
</div>
</div>

<p><br /></p>

<p>You can then import the class and use it:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">from</span> <span class="include">compdeque</span> <span class="keyword">import</span> <span class="include">CompressedDeque</span>

<span class="comment"># Instantiate the Deque</span>
collection = CompressedDeque()

<span class="comment"># Use it as a normal deque</span>
collection.append(<span class="integer">1</span>)

<span class="comment"># Persist to a file</span>
CompressedDeque.save_to_file(collection, file_path=<span class="string"><span class="delimiter">&quot;</span><span class="content">/path/to/collection.dat</span><span class="delimiter">&quot;</span></span>)

<span class="comment"># ...</span>

<span class="comment"># and load it when you need it later</span>
loaded_collection = CompressedDeque.load_from_file(<span class="string"><span class="delimiter">&quot;</span><span class="content">/path/to/collection.dat</span><span class="delimiter">&quot;</span></span>)
</pre></div>
</div>
</div>

<p><br /></p>

<h2 id="source-code">Source Code</h2>

<p>Source code is available here: <a href="https://github.com/lopespm/compressed-deque">https://github.com/lopespm/compressed-deque</a></p>
]]></content>
  </entry>
  
</feed>
